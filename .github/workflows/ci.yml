name: CI/CD Backend

on:
  push:
    branches:
      - main
      - dev

env:
  IMAGE_NAME: jlh-autopam-backend

jobs:
  # 1️⃣ Compilation, tests & packaging (s’exécute sur main et dev)
  build:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.set-tag.outputs.TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Run tests & package
        run: mvn clean package -DskipTests -B

      - name: Determine Docker tag
        id: set-tag
        run: |
          BRANCH=${GITHUB_REF##*/}
          if [[ "$BRANCH" == "main" ]]; then
            echo "TAG=latest" >> $GITHUB_OUTPUT
          else
            echo "TAG=dev-${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
          fi

  # 2️⃣ Build & push Docker image (only on main)
  docker:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          target: runtime
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.TAG }}

  # 3️⃣ Deploy to production (only on main)
  deploy-production:
    needs: docker
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull & run prod container
        run: |
          docker-compose -f docker-compose.prod.yml pull backend
          docker-compose -f docker-compose.prod.yml up -d backend
